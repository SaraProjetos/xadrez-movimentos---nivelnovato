#include <stdio.h>

/*
    Programa: Movimentação das Peças de Xadrez
    Nível: Mestre
    Objetivo: Demonstrar o uso de recursividade e loops aninhados complexos
              na simulação dos movimentos da Torre, Bispo, Rainha e Cavalo.
    Autor: [Seu Nome]
    Data: [Data de hoje]
*/

// ============================
// FUNÇÕES RECURSIVAS
// ============================

// ---------- TORRE ----------
// Move-se em linha reta horizontalmente.
// Aqui, a Torre move 5 casas para a direita.
void moverTorre(int casasRestantes) {
    if (casasRestantes == 0) {
        return; // Caso base da recursão
    }

    printf("Direita (%d)\n", casasRestantes);
    moverTorre(casasRestantes - 1); // Chamada recursiva
}

// ---------- BISPO ----------
// Move-se na diagonal. Usa recursividade e loops aninhados.
// Movimento: 5 casas para cima e à direita.
void moverBispo(int vertical, int horizontal) {
    if (vertical == 0) {
        return; // Caso base da recursão
    }

    // Loop externo: movimento vertical
    for (int i = 0; i < 1; i++) {
        // Loop interno: movimento horizontal (uma vez por cada casa diagonal)
        for (int j = 0; j < 1; j++) {
            printf("Cima, Direita (%d)\n", vertical);
        }
    }

    moverBispo(vertical - 1, horizontal - 1); // Recursão
}

// ---------- RAINHA ----------
// Move-se em todas as direções. Aqui: 8 casas para a esquerda.
void moverRainha(int casasRestantes) {
    if (casasRestantes == 0) {
        return; // Caso base
    }

    printf("Esquerda (%d)\n", casasRestantes);
    moverRainha(casasRestantes - 1); // Chamada recursiva
}


// ============================
// LOOP COMPLEXO - CAVALO
// ============================
// O cavalo move-se em "L": duas casas para cima e uma para a direita.
// Aqui, usamos loops aninhados com múltiplas variáveis e controle de fluxo.
void moverCavalo() {
    int movimentoCima = 2;
    int movimentoDireita = 1;

    printf("Movimento do Cavalo:\n");

    // Loop externo: controla movimento vertical (duas casas para cima)
    for (int i = 1, j = movimentoCima; i <= movimentoCima; i++, j--) {

        printf("Cima (%d)\n", i);

        // Se já subiu uma casa, continue (exemplo de uso do 'continue')
        if (i == 1) {
            continue;
        }

        // Loop interno: controla movimento horizontal (uma casa à direita)
        for (int k = 1; k <= movimentoDireita; k++) {
            printf("Direita (%d)\n", k);

            // Uso do 'break' para interromper o loop após a casa final
            if (k == movimentoDireita) {
                break;
            }
        }
    }

    printf("\n");
}


// ============================
// FUNÇÃO PRINCIPAL
// ============================
int main() {

    printf("===== MOVIMENTO DA TORRE =====\n");
    moverTorre(5); // Chamada recursiva
    printf("\n");

    printf("===== MOVIMENTO DO BISPO =====\n");
    moverBispo(5, 5); // Chamada recursiva com loops aninhados
    printf("\n");

    printf("===== MOVIMENTO DA RAINHA =====\n");
    moverRainha(8); // Chamada recursiva
    printf("\n");

    moverCavalo(); // Movimento complexo com loops aninhados

    printf("Fim da simulação de movimentos.\n");

    return 0;
}
